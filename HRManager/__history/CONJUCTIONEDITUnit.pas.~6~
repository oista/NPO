unit CONJUCTIONEDITUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, EditDialogUnit, StdCtrls, ExtCtrls, PKDBDictEdit, PKDBTable, ComCtrls,
  PKDBEdit, PKDBBBaseComboBox, dictunit, uADStanIntf, uADStanOption,
  uADStanParam, uADStanError, uADDatSManager, uADPhysIntf, uADDAptIntf,
  uADStanAsync, uADDAptManager, DB, uADCompDataSet, uADCompClient,reportunit;

type
  TCONJUCTIONEDIT = class(TEditDialog)
    PKDBDictEdit1: TPKDBDictEdit;
    PKDBDictEdit2: TPKDBDictEdit;
    Label1: TLabel;
    Label2: TLabel;
    PKDBLabelEdit3: TPKDBLabelEdit;
    PKDBLabelEdit4: TPKDBLabelEdit;
    PKDBLabelEdit5: TPKDBLabelEdit;
    PKDBTable2: TPKDBTable;
    ADQuery1: TADQuery;
    ADQuery1WORKCONTRACTID: TFMTBCDField;
    GroupBox2: TGroupBox;
    Label3: TLabel;
    PKDBLabelEdit2: TPKDBLabelEdit;
    PKDBLabelEdit1: TPKDBLabelEdit;
    PKDBLabelEdit6: TPKDBLabelEdit;
    PKDBLabelEdit7: TPKDBLabelEdit;
    PKDBLabelEdit8: TPKDBLabelEdit;
    PKDBBaseEdit1: TPKDBBaseEdit;
    PKDBBLabelComboBox1: TPKDBBLabelComboBox;
    PKDBLabelEdit10: TPKDBLabelEdit;
    PKDBBLabelComboBox2: TPKDBBLabelComboBox;
    PKDBBLabelComboBox3: TPKDBBLabelComboBox;
    PKDBBLabelComboBox4: TPKDBBLabelComboBox;
    CheckBox1: TCheckBox;
    PKDBDictEdit4: TPKDBDictEdit;
    PKDBDictEdit5: TPKDBDictEdit;
    PKDBDictEdit6: TPKDBDictEdit;
    PKDBDictEdit7: TPKDBDictEdit;
    CheckBox2: TCheckBox;

    procedure open; override;
    function  finderrors:boolean; override;
    procedure runcommand; override;
    procedure Button1Click(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CONJUCTIONEDIT : TCONJUCTIONEDIT ;
   Cform : TWREPORT;

implementation
 uses DM;

{$R *.dfm}


procedure TCONJUCTIONEDIT.Button1Click(Sender: TObject);
begin
  inherited;
  if CheckBox1.Checked then    // если надо вывести форму после "ОК"
     begin
      Cform := TWREPORT.Create(self);
      Cform.madeWorkContract(strtofloat(PKDBTable2.Fields.PrimaryKey.FieldVal));
     end;
end;

procedure TCONJUCTIONEDIT.Open;
begin

  case CommandType of
    tcInsert:
      begin
       Caption := Caption + ': Добавление';
       if PKDBTable1.NeedGenPrimaryKey then PKDBTable1.GetTempPrimarykey;
       if PKDBTable2.NeedGenPrimaryKey then PKDBTable2.GetTempPrimarykey;

       // установка значений по умолчанию
       begin
        // доступ на территорию =  TRUE
        PKDBBLabelComboBox4.SetValue('3075940');
        // источник комплектования = вольный найм
      //  PKDBBLabelComboBox1.SetValue('3081505');
        // тип источника комплектования = внешний
       // PKDBBLabelComboBox3.SetValue('3075942');
       end;

      end;
    tcUpdate:
      Begin
        Caption := Caption + ': Изменение';
        PKDBTable1.Fields.PrimaryKey.FieldVal := PrimaryKey;

        // узнаем номер контракта
        ADQuery1.Params[0].Value:= PKDBTable1.Fields.PrimaryKey.FieldVal;
        ADQuery1.Open;
        PKDBTable2.Fields.PrimaryKey.FieldVal:= ADQuery1WORKCONTRACTID.AsString;
        ADQuery1.Close;
      End;
    tcCopy:
      Begin
        Caption := Caption + ': Копирование';
        self.Button1.Enabled:=false;
        showmessage('Функция копирования в разработке.');
       { if PKDBTable1.NeedGenPrimaryKey then
            PKDBTable1.GetTempPrimarykey;
         PKDBTable2.Fields.PrimaryKey.FieldVal:= PKDBTable1.Fields.PrimaryKey.FieldVal;
         PKDBTable3.Fields.PrimaryKey.FieldVal:= PKDBTable1.Fields.PrimaryKey.FieldVal;
         PKDBTable4.Fields.PrimaryKey.FieldVal:= PKDBTable1.Fields.PrimaryKey.FieldVal;
         PKDBTable5.Fields.PrimaryKey.FieldVal:= PKDBTable1.Fields.PrimaryKey.FieldVal;
         PKDBTable6.Fields.PrimaryKey.FieldVal:= PKDBTable1.Fields.PrimaryKey.FieldVal;}
      End;
    tcView:
      Begin
        Caption := Caption + ': Просмотр';
        PKDBTable1.Fields.PrimaryKey.FieldVal:= PrimaryKey;
        PKDBTable2.Fields.PrimaryKey.FieldVal:= PrimaryKey;
      end;
  end;

  if CommandType <> tcInsert then
   begin
    // передаем компонентам сотрудника и ТД
    PKDBTable1.ReadFromDB(PrimaryKey);
    PKDBTable2.ReadFromDB(PKDBTable2.Fields.PrimaryKey.FieldVal);
   end;
  if PKDBTable1.Fields.ParentKey <> nil then
    begin
     PKDBTable1.Fields.ParentKey.FieldVal := ParentKey;
    end;


  if CommandType = tcView then
    Begin
      Button1.Enabled := false;
    End;
end;

function TCONJUCTIONEDIT.FindErrors: Boolean;
Var
  i: integer;
begin
  // присваем договору ID гражданина
  PKDBDictEdit4.DictionaryValue:= PKDBDictEdit1.DictionaryValue;

  // присваем договору ID создаваемого сотрудника
  PKDBDictEdit5.DictionaryValue:= PKDBTable1.Fields.PrimaryKey.FieldVal;

  // СОВМЕСТИТЕЛЬ
  PKDBDictEdit7.DictionaryValue:='3009017';


  Result := False;
  for i := 0 to PKDBTable1.Fields.Count - 1 do
    Begin
      if (PKDBTable1.Fields.Items[i].Nullable = false) and
         (PKDBTable1.Fields.Items[i].IsEmpty) then
        Begin
          if (PKDBTable1.Fields.Items[i].IsPrimaryKey = false) then
               Result := True;
        End;
    End;
  for i := 0 to PKDBTable2.Fields.Count - 1 do
    Begin
      if (PKDBTable2.Fields.Items[i].Nullable = false) and
         (PKDBTable2.Fields.Items[i].IsEmpty) then
        Begin
          if (PKDBTable2.Fields.Items[i].IsPrimaryKey = false) then
               Result := True;
        End;
    End;
  if Result then
    ShowMessage('Не заполнены обязательные поля')
  else
     // обработка вводимых данных
   begin
     // расчет испытательного срока
     if PKDBBaseEdit1.Text<>'0' then
      PKDBDictEdit6.DictionaryValue:=
        ''''+datetostr(strtodate(PKDBLabelEdit4.Text)+strtoint(PKDBBaseEdit1.Text))+''''
     else
      PKDBDictEdit6.DictionaryValue:='';
   end;
end;

procedure TCONJUCTIONEDIT.RunCommand;
begin
  case CommandType of
    tcInsert:
     begin
      begin  // дополнение данных
       // дату начала договора берем из даты прихода на должность
       if (PKDBLabelEdit6.Text='') then
          (PKDBLabelEdit6.Text:=PKDBLabelEdit4.Text);
        
      end;
      PrimaryKey := PKDBTable1.Insert;
      PKDBTable2.Fields.PrimaryKey.FieldVal:=PrimaryKey;
      PKDBTable2.Insert;
     end;
    tcCopy:
     begin
      PrimaryKey := PKDBTable1.Insert;
      PKDBTable2.Fields.PrimaryKey.FieldVal:=PrimaryKey;
     end;
    tcUpdate:
     begin
      PKDBTable1.Update;
      PKDBTable2.Update;
     end;
  end;
end;

initialization

RegisterClasses([TCONJUCTIONEDIT]);
end.
